// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManager.API.Data;

#nullable disable

namespace TaskManager.API.Migrations
{
    [DbContext(typeof(TaskManagerDbContext))]
    [Migration("20250926121057_AddAuthenticationFields")]
    partial class AddAuthenticationFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("TaskManager.API.Models.TaskItem", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            TaskId = 1,
                            Category = "Development",
                            CompletedAt = new DateTime(2025, 9, 25, 12, 10, 57, 343, DateTimeKind.Utc).AddTicks(3180),
                            CreatedAt = new DateTime(2025, 9, 26, 12, 10, 57, 343, DateTimeKind.Utc).AddTicks(3180),
                            Description = "Install necessary software and tools for development",
                            Priority = "High",
                            Status = "Completed",
                            Title = "Setup Development Environment",
                            UserId = 1
                        },
                        new
                        {
                            TaskId = 2,
                            Category = "Design",
                            CreatedAt = new DateTime(2025, 9, 26, 12, 10, 57, 343, DateTimeKind.Utc).AddTicks(3189),
                            Description = "Design wireframes and mockups for the user interface",
                            DueDate = new DateTime(2025, 10, 3, 12, 10, 57, 343, DateTimeKind.Utc).AddTicks(3190),
                            Priority = "Medium",
                            Status = "InProgress",
                            Title = "Create User Interface Mockups",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("TaskManager.API.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedAt = new DateTime(2025, 9, 26, 12, 10, 57, 343, DateTimeKind.Utc).AddTicks(3026),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            IsActive = true,
                            LastName = "Doe",
                            PasswordHash = "",
                            Role = "Admin"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedAt = new DateTime(2025, 9, 26, 12, 10, 57, 343, DateTimeKind.Utc).AddTicks(3028),
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            IsActive = true,
                            LastName = "Smith",
                            PasswordHash = "",
                            Role = "User"
                        });
                });

            modelBuilder.Entity("TaskManager.API.Models.TaskItem", b =>
                {
                    b.HasOne("TaskManager.API.Models.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManager.API.Models.User", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
